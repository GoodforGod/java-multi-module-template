buildscript {
    dependencies {
        classpath "com.diffplug.spotless:spotless-plugin-gradle:6.19.0"
    }
}

plugins {
    id "java"
    id "application"
    id "jacoco"
    id "jacoco-report-aggregation"

    id "org.sonarqube" version "4.3.0.3225"
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "goodforgod"
        property "sonar.projectKey", "GoodforGod_$artifactRootId"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml"
    }
}

dependencies {
    jacocoAggregation project(":module-one")
    jacocoAggregation project(":module-two")
}

reporting {
    reports {
        testCodeCoverageReport(JacocoCoverageReport) {
            testType = TestSuiteType.UNIT_TEST
        }
    }
}

allprojects {
    group = groupId
    version = artifactVersion

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "jacoco"
    apply plugin: "application"
    apply plugin: "com.diffplug.spotless"

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    dependencies {
        compileOnly "org.jetbrains:annotations:24.0.1"

        implementation "ch.qos.logback:logback-classic:1.4.11"

        testRuntimeOnly libs.junit.engine
        testImplementation libs.junit.api
        testImplementation libs.junit.params
    }

    test {
        failFast(false)
        useJUnitPlatform()
        testLogging {
            events("passed", "skipped", "failed")
            exceptionFormat("full")
            showStandardStreams(false)
        }

        reports {
            html.required = false
            junitXml.required = true
        }
    }

    spotless {
        java {
            encoding("UTF-8")
            importOrder()
            removeUnusedImports()
            eclipse("4.21").configFile("${rootDir}/config/codestyle.xml")
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding("UTF-8")
        options.incremental(true)
        options.fork = true
    }

    check.dependsOn jacocoTestReport
    jacocoTestReport {
        reports {
            xml.required = true
            html.destination file("${buildDir}/jacocoHtml")
        }
    }

    javadoc {
        options.encoding = "UTF-8"
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption("html5", true)
        }
    }
}
